//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#include "SmartCdlServerSeRoNetSDKPortFactory.hh"

// include all potentially required pattern implementations
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/PushClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/EventClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QClientOPCUA.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/SendClient.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Client/QueryClient.hpp>

#include <SeRoNetSDK/SeRoNet/OPCUA/Server/PushServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/EventServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/SendServer.hpp>
#include <SeRoNetSDK/SeRoNet/OPCUA/Server/QueryServer.hpp>

// include referenced CommunicationObject SeRoNetSDK self description implementations
#include "CommNavigationObjects/CommCdlRobotBlockedEventResultOpcUa.hh"
#include "CommNavigationObjects/CommCdlGoalEventResultOpcUa.hh"
#include "CommNavigationObjects/CommCdlGoalEventParameterOpcUa.hh"
#include "CommNavigationObjects/CommPlannerGoalOpcUa.hh"
#include "CommRobotinoObjects/CommPathNavigationGoalOpcUa.hh"
#include "CommBasicObjects/CommNavigationVelocityOpcUa.hh"
#include "CommBasicObjects/CommBaseStateOpcUa.hh"
#include "CommBasicObjects/CommMobileLaserScanOpcUa.hh"
#include "CommNavigationObjects/CommCdlRobotBlockedEventParameterOpcUa.hh"
#include "CommNavigationObjects/CommCdlRobotBlockedStateOpcUa.hh"
#include "CommBasicObjects/CommMobileIRScanOpcUa.hh"
#include "CommNavigationObjects/CdlGoalEventStateOpcUa.hh"
#include "CommTrackingObjects/CommTrackingGoalOpcUa.hh"

// create a static instance of the SeRoNetSDKPortFactory
static SmartCdlServerSeRoNetSDKPortFactory SeRoNetSDKPortFactory;

SmartCdlServerSeRoNetSDKPortFactory::SmartCdlServerSeRoNetSDKPortFactory()
{  
	componentImpl = 0;
	SmartCdlServer::instance()->addPortFactory("OpcUa_SeRoNet", this);
}

SmartCdlServerSeRoNetSDKPortFactory::~SmartCdlServerSeRoNetSDKPortFactory()
{  }

void SmartCdlServerSeRoNetSDKPortFactory::initialize(SmartCdlServer *component, int argc, char* argv[])
{
	componentImpl = new SeRoNet::Utils::Component(component->connections.component.name);
}

int SmartCdlServerSeRoNetSDKPortFactory::onStartup()
{
	if (!component_thread.joinable()) {
    	component_thread = std::thread(&SmartCdlServerSeRoNetSDKPortFactory::task_execution, this);
    	return 0;
    }
	return -1;
}

Smart::ISendClientPattern<CommBasicObjects::CommNavigationVelocity> * SmartCdlServerSeRoNetSDKPortFactory::createNavVelSendClient()
{
	return new SeRoNet::OPCUA::Client::SendClient<CommBasicObjects::CommNavigationVelocity>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileLaserScan> * SmartCdlServerSeRoNetSDKPortFactory::createLaserClient2()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileLaserScan>(componentImpl);
}

Smart::IPushClientPattern<CommNavigationObjects::CommPlannerGoal> * SmartCdlServerSeRoNetSDKPortFactory::createPlannerClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommNavigationObjects::CommPlannerGoal>(componentImpl);
}

Smart::IPushClientPattern<CommRobotinoObjects::CommPathNavigationGoal> * SmartCdlServerSeRoNetSDKPortFactory::createPathNavigationGoalClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommRobotinoObjects::CommPathNavigationGoal>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommBaseState> * SmartCdlServerSeRoNetSDKPortFactory::createBaseStateClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommBaseState>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileLaserScan> * SmartCdlServerSeRoNetSDKPortFactory::createLaserClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileLaserScan>(componentImpl);
}

Smart::IPushClientPattern<CommTrackingObjects::CommTrackingGoal> * SmartCdlServerSeRoNetSDKPortFactory::createTrackingClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommTrackingObjects::CommTrackingGoal>(componentImpl);
}

Smart::IPushClientPattern<CommBasicObjects::CommMobileIRScan> * SmartCdlServerSeRoNetSDKPortFactory::createIRClient()
{
	return new SeRoNet::OPCUA::Client::PushClient<CommBasicObjects::CommMobileIRScan>(componentImpl);
}


Smart::IEventServerPattern<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState,SmartACE::EventId> * SmartCdlServerSeRoNetSDKPortFactory::createGoalEventServer(const std::string &serviceName, Smart::IEventTestHandler<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState> *goalEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommNavigationObjects::CommCdlGoalEventParameter, CommNavigationObjects::CommCdlGoalEventResult, CommNavigationObjects::CdlGoalEventState>(componentImpl, serviceName, goalEventServerEventTestHandler);
}

Smart::ISendServerPattern<CommBasicObjects::CommNavigationVelocity> * SmartCdlServerSeRoNetSDKPortFactory::createNavVelSendServer(const std::string &serviceName)
{
	return new SeRoNet::OPCUA::Server::SendServer<CommBasicObjects::CommNavigationVelocity>(componentImpl, serviceName);
}

Smart::IEventServerPattern<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState,SmartACE::EventId> * SmartCdlServerSeRoNetSDKPortFactory::createRobotBlockedEventServer(const std::string &serviceName, Smart::IEventTestHandler<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState> *robotBlockedEventServerEventTestHandler)
{
	return new SeRoNet::OPCUA::Server::EventServer<CommNavigationObjects::CommCdlRobotBlockedEventParameter, CommNavigationObjects::CommCdlRobotBlockedEventResult, CommNavigationObjects::CommCdlRobotBlockedState>(componentImpl, serviceName, robotBlockedEventServerEventTestHandler);
}


int SmartCdlServerSeRoNetSDKPortFactory::task_execution()
{
	componentImpl->run();
	return 0;
}

int SmartCdlServerSeRoNetSDKPortFactory::onShutdown(const std::chrono::steady_clock::duration &timeoutTime)
{
	// stop component-internal infrastructure
	componentImpl->stopRunning();
	// wait on component thread to exit
	if (component_thread.joinable()) {
		// FIXME: don't wait infinetly (use timeoutTime here)
    	component_thread.join();
    }
	return 0;
}

void SmartCdlServerSeRoNetSDKPortFactory::destroy()
{
	// clean-up component's internally used resources
	delete componentImpl;
}
